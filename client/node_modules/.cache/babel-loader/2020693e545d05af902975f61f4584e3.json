{"ast":null,"code":"const minMax = (min, max) => value => Math.min(max, Math.max(min, value));\n\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to1 = minMax(0, 1);\n\nconst searchRegExp = (string, regexp) => {\n  const result = string.match(regexp);\n\n  if (Array.isArray(result)) {\n    return result[0];\n  }\n\n  return null;\n};\n\nconst colorOptionsDefault = {};\n\nconst fromHSLAArrayToHSLAString = function (src) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : colorOptionsDefault;\n\n  var _a;\n\n  const {\n    alpha = 1\n  } = options;\n  const alphaAdjust = minMax0to1(alpha);\n  const h = minMax0to360(src[0]);\n  const s = minMax0to100(src[1]);\n  const l = minMax0to100(src[2]);\n  const a = minMax0to1(((_a = src[3]) !== null && _a !== void 0 ? _a : 1) * alphaAdjust);\n  return `hsla(${h},${s}%,${l}%,${a})`;\n};\n\nconst formatColor = function (color) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : colorOptionsDefault;\n\n  if (typeof color === 'string') {\n    const {\n      alpha\n    } = options;\n\n    if (alpha !== undefined) {\n      const colorClean = color.replace(/\\s/g, '');\n      const alphaAdjust = minMax0to1(alpha);\n\n      if (/^(hsl|rgb)\\(/i.test(colorClean)) {\n        return colorClean.replace('(', 'a(').replace(/\\)$/, `,${alphaAdjust})`);\n      }\n\n      if (/^(hsla|rgba)\\(/i.test(colorClean)) {\n        const alphaCurrentMatch = searchRegExp(colorClean, /,[\\d.]+\\)$/);\n\n        if (alphaCurrentMatch) {\n          const alphaCurrent = Number(alphaCurrentMatch.replace(/[,)]/g, ''));\n          return colorClean.replace(/,[\\d.]+\\)$/, `,${alphaCurrent * alphaAdjust})`);\n        }\n      }\n\n      return colorClean;\n    }\n\n    return color;\n  }\n\n  return fromHSLAArrayToHSLAString(color, options);\n};\n\nconst createThemeColor = settings => {\n  if (typeof settings === 'function') {\n    const createColor = settings;\n    return (indexProvided, options) => {\n      const index = Math.round(indexProvided);\n      const color = createColor(index);\n      return formatColor(color, options);\n    };\n  }\n\n  const series = settings;\n  return (indexProvided, options) => {\n    if (!series.length) {\n      return '';\n    }\n\n    const index = Math.round(indexProvided);\n    const color = series[index > series.length - 1 ? series.length - 1 : index];\n    return formatColor(color, options);\n  };\n};\n\nexport { createThemeColor };","map":{"version":3,"sources":["/Users/shyanw/Documents/Nasa-Project/client/node_modules/@arwes/theme/build/esm/createThemeColor/createThemeColor.js"],"names":["minMax","min","max","value","Math","minMax0to360","minMax0to100","minMax0to1","searchRegExp","string","regexp","result","match","Array","isArray","colorOptionsDefault","fromHSLAArrayToHSLAString","src","options","_a","alpha","alphaAdjust","h","s","l","a","formatColor","color","undefined","colorClean","replace","test","alphaCurrentMatch","alphaCurrent","Number","createThemeColor","settings","createColor","indexProvided","index","round","series","length"],"mappings":"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","sourcesContent":["const minMax = (min, max) => (value) => Math.min(max, Math.max(min, value));\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to1 = minMax(0, 1);\nconst searchRegExp = (string, regexp) => {\n    const result = string.match(regexp);\n    if (Array.isArray(result)) {\n        return result[0];\n    }\n    return null;\n};\nconst colorOptionsDefault = {};\nconst fromHSLAArrayToHSLAString = (src, options = colorOptionsDefault) => {\n    var _a;\n    const { alpha = 1 } = options;\n    const alphaAdjust = minMax0to1(alpha);\n    const h = minMax0to360(src[0]);\n    const s = minMax0to100(src[1]);\n    const l = minMax0to100(src[2]);\n    const a = minMax0to1(((_a = src[3]) !== null && _a !== void 0 ? _a : 1) * alphaAdjust);\n    return `hsla(${h},${s}%,${l}%,${a})`;\n};\nconst formatColor = (color, options = colorOptionsDefault) => {\n    if (typeof color === 'string') {\n        const { alpha } = options;\n        if (alpha !== undefined) {\n            const colorClean = color.replace(/\\s/g, '');\n            const alphaAdjust = minMax0to1(alpha);\n            if (/^(hsl|rgb)\\(/i.test(colorClean)) {\n                return colorClean\n                    .replace('(', 'a(')\n                    .replace(/\\)$/, `,${alphaAdjust})`);\n            }\n            if (/^(hsla|rgba)\\(/i.test(colorClean)) {\n                const alphaCurrentMatch = searchRegExp(colorClean, /,[\\d.]+\\)$/);\n                if (alphaCurrentMatch) {\n                    const alphaCurrent = Number(alphaCurrentMatch.replace(/[,)]/g, ''));\n                    return colorClean.replace(/,[\\d.]+\\)$/, `,${alphaCurrent * alphaAdjust})`);\n                }\n            }\n            return colorClean;\n        }\n        return color;\n    }\n    return fromHSLAArrayToHSLAString(color, options);\n};\nconst createThemeColor = (settings) => {\n    if (typeof settings === 'function') {\n        const createColor = settings;\n        return (indexProvided, options) => {\n            const index = Math.round(indexProvided);\n            const color = createColor(index);\n            return formatColor(color, options);\n        };\n    }\n    const series = settings;\n    return (indexProvided, options) => {\n        if (!series.length) {\n            return '';\n        }\n        const index = Math.round(indexProvided);\n        const color = series[index > series.length - 1 ? series.length - 1 : index];\n        return formatColor(color, options);\n    };\n};\nexport { createThemeColor };\n"]},"metadata":{},"sourceType":"module"}