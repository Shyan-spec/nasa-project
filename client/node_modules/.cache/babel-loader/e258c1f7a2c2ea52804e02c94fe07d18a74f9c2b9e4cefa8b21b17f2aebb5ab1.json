{"ast":null,"code":"const minMax = (min, max) => value => Math.min(max, Math.max(min, value));\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to1 = minMax(0, 1);\nconst searchRegExp = (string, regexp) => {\n  const result = string.match(regexp);\n  if (Array.isArray(result)) {\n    return result[0];\n  }\n  return null;\n};\nconst colorOptionsDefault = {};\nconst fromHSLAArrayToHSLAString = function (src) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : colorOptionsDefault;\n  var _a;\n  const {\n    alpha = 1\n  } = options;\n  const alphaAdjust = minMax0to1(alpha);\n  const h = minMax0to360(src[0]);\n  const s = minMax0to100(src[1]);\n  const l = minMax0to100(src[2]);\n  const a = minMax0to1(((_a = src[3]) !== null && _a !== void 0 ? _a : 1) * alphaAdjust);\n  return `hsla(${h},${s}%,${l}%,${a})`;\n};\nconst formatColor = function (color) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : colorOptionsDefault;\n  if (typeof color === 'string') {\n    const {\n      alpha\n    } = options;\n    if (alpha !== undefined) {\n      const colorClean = color.replace(/\\s/g, '');\n      const alphaAdjust = minMax0to1(alpha);\n      if (/^(hsl|rgb)\\(/i.test(colorClean)) {\n        return colorClean.replace('(', 'a(').replace(/\\)$/, `,${alphaAdjust})`);\n      }\n      if (/^(hsla|rgba)\\(/i.test(colorClean)) {\n        const alphaCurrentMatch = searchRegExp(colorClean, /,[\\d.]+\\)$/);\n        if (alphaCurrentMatch) {\n          const alphaCurrent = Number(alphaCurrentMatch.replace(/[,)]/g, ''));\n          return colorClean.replace(/,[\\d.]+\\)$/, `,${alphaCurrent * alphaAdjust})`);\n        }\n      }\n      return colorClean;\n    }\n    return color;\n  }\n  return fromHSLAArrayToHSLAString(color, options);\n};\nconst createThemeColor = settings => {\n  if (typeof settings === 'function') {\n    const createColor = settings;\n    return (indexProvided, options) => {\n      const index = Math.round(indexProvided);\n      const color = createColor(index);\n      return formatColor(color, options);\n    };\n  }\n  const series = settings;\n  return (indexProvided, options) => {\n    if (!series.length) {\n      return '';\n    }\n    const index = Math.round(indexProvided);\n    const color = series[index > series.length - 1 ? series.length - 1 : index];\n    return formatColor(color, options);\n  };\n};\nexport { createThemeColor };","map":{"version":3,"names":["minMax","min","max","value","Math","minMax0to360","minMax0to100","minMax0to1","searchRegExp","string","regexp","result","match","Array","isArray","colorOptionsDefault","fromHSLAArrayToHSLAString","src","options","_a","alpha","alphaAdjust","h","s","l","a","formatColor","color","undefined","colorClean","replace","test","alphaCurrentMatch","alphaCurrent","Number","createThemeColor","settings","createColor","indexProvided","index","round","series","length"],"sources":["/Users/shyanw/Documents/Nasa-Project/client/node_modules/@arwes/theme/build/esm/createThemeColor/createThemeColor.js"],"sourcesContent":["const minMax = (min, max) => (value) => Math.min(max, Math.max(min, value));\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to1 = minMax(0, 1);\nconst searchRegExp = (string, regexp) => {\n    const result = string.match(regexp);\n    if (Array.isArray(result)) {\n        return result[0];\n    }\n    return null;\n};\nconst colorOptionsDefault = {};\nconst fromHSLAArrayToHSLAString = (src, options = colorOptionsDefault) => {\n    var _a;\n    const { alpha = 1 } = options;\n    const alphaAdjust = minMax0to1(alpha);\n    const h = minMax0to360(src[0]);\n    const s = minMax0to100(src[1]);\n    const l = minMax0to100(src[2]);\n    const a = minMax0to1(((_a = src[3]) !== null && _a !== void 0 ? _a : 1) * alphaAdjust);\n    return `hsla(${h},${s}%,${l}%,${a})`;\n};\nconst formatColor = (color, options = colorOptionsDefault) => {\n    if (typeof color === 'string') {\n        const { alpha } = options;\n        if (alpha !== undefined) {\n            const colorClean = color.replace(/\\s/g, '');\n            const alphaAdjust = minMax0to1(alpha);\n            if (/^(hsl|rgb)\\(/i.test(colorClean)) {\n                return colorClean\n                    .replace('(', 'a(')\n                    .replace(/\\)$/, `,${alphaAdjust})`);\n            }\n            if (/^(hsla|rgba)\\(/i.test(colorClean)) {\n                const alphaCurrentMatch = searchRegExp(colorClean, /,[\\d.]+\\)$/);\n                if (alphaCurrentMatch) {\n                    const alphaCurrent = Number(alphaCurrentMatch.replace(/[,)]/g, ''));\n                    return colorClean.replace(/,[\\d.]+\\)$/, `,${alphaCurrent * alphaAdjust})`);\n                }\n            }\n            return colorClean;\n        }\n        return color;\n    }\n    return fromHSLAArrayToHSLAString(color, options);\n};\nconst createThemeColor = (settings) => {\n    if (typeof settings === 'function') {\n        const createColor = settings;\n        return (indexProvided, options) => {\n            const index = Math.round(indexProvided);\n            const color = createColor(index);\n            return formatColor(color, options);\n        };\n    }\n    const series = settings;\n    return (indexProvided, options) => {\n        if (!series.length) {\n            return '';\n        }\n        const index = Math.round(indexProvided);\n        const color = series[index > series.length - 1 ? series.length - 1 : index];\n        return formatColor(color, options);\n    };\n};\nexport { createThemeColor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}