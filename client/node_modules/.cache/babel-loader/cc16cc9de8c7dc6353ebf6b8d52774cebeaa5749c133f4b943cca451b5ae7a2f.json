{"ast":null,"code":"import { createThemeMultiplier } from \"../createThemeMultiplier/index.js\";\nimport { createThemeUnit } from \"../createThemeUnit/index.js\";\nimport { createThemeColor } from \"../createThemeColor/index.js\";\nimport { createThemeStyle } from \"../createThemeStyle/index.js\";\nimport { createThemeBreakpoints } from \"../createThemeBreakpoints/index.js\";\n// TODO: Set typing.\nconst extendDeepObject = (structure, defaults, extension) => {\n  const newObject = {};\n  Object.keys(structure).forEach(key => {\n    var _a;\n    if (typeof structure[key] === 'object') {\n      if (structure[key] === null) {\n        throw new Error('Theme structure values can not be null.');\n      }\n      if (!defaults[key] || typeof defaults[key] !== 'object') {\n        throw new Error('Theme default value should match theme structure object.');\n      }\n      newObject[key] = extendDeepObject(structure[key], defaults[key], extension === null || extension === void 0 ? void 0 : extension[key]);\n    } else {\n      newObject[key] = (_a = extension === null || extension === void 0 ? void 0 : extension[key]) !== null && _a !== void 0 ? _a : defaults[key];\n    }\n  });\n  return newObject;\n};\n// TODO: Set typing.\nconst createDeepThemeSetup = (structure, settings) => {\n  const newObject = {};\n  Object.keys(structure).forEach(key => {\n    if (typeof structure[key] === 'object') {\n      newObject[key] = createDeepThemeSetup(structure[key], settings[key]);\n    } else {\n      switch (structure[key]) {\n        case 'multiplier':\n          newObject[key] = createThemeMultiplier(settings[key]);\n          break;\n        case 'unit':\n          newObject[key] = createThemeUnit(settings[key]);\n          break;\n        case 'color':\n          newObject[key] = createThemeColor(settings[key]);\n          break;\n        case 'style':\n          newObject[key] = createThemeStyle(settings[key]);\n          break;\n        case 'breakpoints':\n          newObject[key] = createThemeBreakpoints(settings[key]);\n          break;\n        case 'other':\n          newObject[key] = settings[key];\n          break;\n        default:\n          throw new Error(`Invalid theme structure key \"${structure[key]}\" provided.`);\n      }\n    }\n  });\n  return newObject;\n};\nconst createCreateTheme = (themeStructure, themeSettingsDefaults) => {\n  const createTheme = function () {\n    let themeSettingsExtensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let themeSettings;\n    if (Array.isArray(themeSettingsExtensions)) {\n      // TODO:\n      // @ts-expect-error\n      themeSettings = themeSettingsExtensions.reduce((settingsTotal, settingsItem) => {\n        if (!settingsItem) {\n          return settingsTotal;\n        }\n        return extendDeepObject(themeStructure, settingsTotal, settingsItem);\n      }, themeSettingsDefaults);\n    } else {\n      themeSettings = extendDeepObject(themeStructure, themeSettingsDefaults, themeSettingsExtensions);\n    }\n    return createDeepThemeSetup(themeStructure, themeSettings);\n  };\n  return createTheme;\n};\nexport { createCreateTheme };","map":{"version":3,"names":["createThemeMultiplier","createThemeUnit","createThemeColor","createThemeStyle","createThemeBreakpoints","extendDeepObject","structure","defaults","extension","newObject","Object","keys","forEach","key","_a","Error","createDeepThemeSetup","settings","createCreateTheme","themeStructure","themeSettingsDefaults","createTheme","themeSettingsExtensions","themeSettings","Array","isArray","reduce","settingsTotal","settingsItem"],"sources":["/Users/shyanw/Documents/Nasa-Project/client/node_modules/@arwes/theme/build/esm/createCreateTheme/createCreateTheme.js"],"sourcesContent":["import { createThemeMultiplier } from \"../createThemeMultiplier/index.js\";\nimport { createThemeUnit } from \"../createThemeUnit/index.js\";\nimport { createThemeColor } from \"../createThemeColor/index.js\";\nimport { createThemeStyle } from \"../createThemeStyle/index.js\";\nimport { createThemeBreakpoints } from \"../createThemeBreakpoints/index.js\";\n// TODO: Set typing.\nconst extendDeepObject = (structure, defaults, extension) => {\n    const newObject = {};\n    Object.keys(structure).forEach(key => {\n        var _a;\n        if (typeof structure[key] === 'object') {\n            if (structure[key] === null) {\n                throw new Error('Theme structure values can not be null.');\n            }\n            if (!defaults[key] || typeof defaults[key] !== 'object') {\n                throw new Error('Theme default value should match theme structure object.');\n            }\n            newObject[key] = extendDeepObject(structure[key], defaults[key], extension === null || extension === void 0 ? void 0 : extension[key]);\n        }\n        else {\n            newObject[key] = (_a = extension === null || extension === void 0 ? void 0 : extension[key]) !== null && _a !== void 0 ? _a : defaults[key];\n        }\n    });\n    return newObject;\n};\n// TODO: Set typing.\nconst createDeepThemeSetup = (structure, settings) => {\n    const newObject = {};\n    Object.keys(structure).forEach(key => {\n        if (typeof structure[key] === 'object') {\n            newObject[key] = createDeepThemeSetup(structure[key], settings[key]);\n        }\n        else {\n            switch (structure[key]) {\n                case 'multiplier':\n                    newObject[key] = createThemeMultiplier(settings[key]);\n                    break;\n                case 'unit':\n                    newObject[key] = createThemeUnit(settings[key]);\n                    break;\n                case 'color':\n                    newObject[key] = createThemeColor(settings[key]);\n                    break;\n                case 'style':\n                    newObject[key] = createThemeStyle(settings[key]);\n                    break;\n                case 'breakpoints':\n                    newObject[key] = createThemeBreakpoints(settings[key]);\n                    break;\n                case 'other':\n                    newObject[key] = settings[key];\n                    break;\n                default: throw new Error(`Invalid theme structure key \"${structure[key]}\" provided.`);\n            }\n        }\n    });\n    return newObject;\n};\nconst createCreateTheme = (themeStructure, themeSettingsDefaults) => {\n    const createTheme = (themeSettingsExtensions = {}) => {\n        let themeSettings;\n        if (Array.isArray(themeSettingsExtensions)) {\n            // TODO:\n            // @ts-expect-error\n            themeSettings = themeSettingsExtensions.reduce((settingsTotal, settingsItem) => {\n                if (!settingsItem) {\n                    return settingsTotal;\n                }\n                return extendDeepObject(themeStructure, settingsTotal, settingsItem);\n            }, themeSettingsDefaults);\n        }\n        else {\n            themeSettings = extendDeepObject(themeStructure, themeSettingsDefaults, themeSettingsExtensions);\n        }\n        return createDeepThemeSetup(themeStructure, themeSettings);\n    };\n    return createTheme;\n};\nexport { createCreateTheme };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}